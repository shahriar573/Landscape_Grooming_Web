<?php

namespace App\Http\Controllers\Staff;

use App\Http\Controllers\Controller;
use App\Models\Booking;
use App\Models\Service;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class StaffDashboardController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth', 'role:staff']);
    }

    public function dashboard()
    {
        $staff = Auth::user();
        
        // Staff-specific metrics
        $totalAssignedBookings = Booking::where('staff_id', $staff->id)->count();
        $completedBookings = Booking::where('staff_id', $staff->id)
            ->where('status', 'completed')->count();
        $pendingBookings = Booking::where('staff_id', $staff->id)
            ->where('status', 'pending')->count();
        $todayBookings = Booking::where('staff_id', $staff->id)
            ->whereDate('scheduled_at', today())->count();

        // Revenue generated by this staff member
        $totalRevenue = Booking::where('staff_id', $staff->id)
            ->where('status', 'completed')
            ->sum('price');

        // Today's schedule
        $todaySchedule = Booking::with(['service', 'customer'])
            ->where('staff_id', $staff->id)
            ->whereDate('scheduled_at', today())
            ->orderBy('scheduled_at')
            ->get();

        // Upcoming bookings (next 7 days)
        $upcomingBookings = Booking::with(['service', 'customer'])
            ->where('staff_id', $staff->id)
            ->where('scheduled_at', '>', now())
            ->where('scheduled_at', '<=', now()->addDays(7))
            ->orderBy('scheduled_at')
            ->get();

        // Recent completed bookings
        $recentCompletedBookings = Booking::with(['service', 'customer'])
            ->where('staff_id', $staff->id)
            ->where('status', 'completed')
            ->latest('updated_at')
            ->limit(5)
            ->get();

        // Monthly performance
        $monthlyStats = Booking::where('staff_id', $staff->id)
            ->select(
                DB::raw('MONTH(scheduled_at) as month'),
                DB::raw('YEAR(scheduled_at) as year'),
                DB::raw('COUNT(*) as total_bookings'),
                DB::raw('SUM(CASE WHEN status = "completed" THEN 1 ELSE 0 END) as completed'),
                DB::raw('SUM(CASE WHEN status = "completed" THEN price ELSE 0 END) as revenue')
            )
            ->where('scheduled_at', '>=', Carbon::now()->subMonths(6))
            ->groupBy('year', 'month')
            ->orderBy('year', 'desc')
            ->orderBy('month', 'desc')
            ->get();

        return view('staff.dashboard', compact(
            'totalAssignedBookings', 'completedBookings', 'pendingBookings', 
            'todayBookings', 'totalRevenue', 'todaySchedule', 'upcomingBookings',
            'recentCompletedBookings', 'monthlyStats'
        ));
    }

    public function bookings()
    {
        $staff = Auth::user();
        
        $bookings = Booking::with(['service', 'customer'])
            ->where('staff_id', $staff->id)
            ->when(request('status'), function($query, $status) {
                return $query->where('status', $status);
            })
            ->when(request('date_from'), function($query, $dateFrom) {
                return $query->where('scheduled_at', '>=', $dateFrom);
            })
            ->when(request('date_to'), function($query, $dateTo) {
                return $query->where('scheduled_at', '<=', $dateTo);
            })
            ->orderBy('scheduled_at', 'desc')
            ->paginate(15);

        $bookingStats = [
            'pending' => Booking::where('staff_id', $staff->id)->where('status', 'pending')->count(),
            'confirmed' => Booking::where('staff_id', $staff->id)->where('status', 'confirmed')->count(),
            'in_progress' => Booking::where('staff_id', $staff->id)->where('status', 'in_progress')->count(),
            'completed' => Booking::where('staff_id', $staff->id)->where('status', 'completed')->count(),
            'cancelled' => Booking::where('staff_id', $staff->id)->where('status', 'cancelled')->count()
        ];

        return view('staff.bookings.index', compact('bookings', 'bookingStats'));
    }

    public function updateBookingStatus(Request $request, Booking $booking)
    {
        $staff = Auth::user();
        
        // Verify this booking is assigned to the current staff member
        if ($booking->staff_id !== $staff->id) {
            abort(403, 'You can only update bookings assigned to you.');
        }

        $request->validate([
            'status' => 'required|in:confirmed,in_progress,completed,cancelled',
            'notes' => 'nullable|string|max:1000'
        ]);

        $booking->update([
            'status' => $request->status,
            'notes' => $request->notes ? $booking->notes . '\n\n[Staff Update]: ' . $request->notes : $booking->notes
        ]);

        return redirect()->back()->with('status', 'Booking status updated successfully.');
    }

    public function schedule()
    {
        $staff = Auth::user();
        
        // Get bookings for calendar view
        $bookings = Booking::with(['service', 'customer'])
            ->where('staff_id', $staff->id)
            ->where('scheduled_at', '>=', now()->startOfMonth())
            ->where('scheduled_at', '<=', now()->endOfMonth()->addMonths(2))
            ->get()
            ->map(function($booking) {
                return [
                    'id' => $booking->id,
                    'title' => $booking->service->name . ' - ' . $booking->customer->name,
                    'start' => $booking->scheduled_at->toISOString(),
                    'end' => $booking->scheduled_at->addMinutes($booking->service->duration ?? 60)->toISOString(),
                    'backgroundColor' => $this->getStatusColor($booking->status),
                    'borderColor' => $this->getStatusColor($booking->status),
                    'extendedProps' => [
                        'customer' => $booking->customer->name,
                        'service' => $booking->service->name,
                        'status' => $booking->status,
                        'price' => $booking->price,
                        'notes' => $booking->notes
                    ]
                ];
            });

        return view('staff.schedule', compact('bookings'));
    }

    private function getStatusColor($status)
    {
        $colors = [
            'pending' => '#fbbf24',
            'confirmed' => '#3b82f6',
            'in_progress' => '#8b5cf6',
            'completed' => '#10b981',
            'cancelled' => '#ef4444'
        ];

        return $colors[$status] ?? '#6b7280';
    }

    public function performance()
    {
        $staff = Auth::user();
        
        // Performance metrics over different periods
        $periods = [
            'this_month' => [
                'start' => now()->startOfMonth(),
                'end' => now()->endOfMonth()
            ],
            'last_month' => [
                'start' => now()->subMonth()->startOfMonth(),
                'end' => now()->subMonth()->endOfMonth()
            ],
            'this_year' => [
                'start' => now()->startOfYear(),
                'end' => now()->endOfYear()
            ]
        ];

        $performanceData = [];
        
        foreach ($periods as $period => $dates) {
            $bookings = Booking::where('staff_id', $staff->id)
                ->whereBetween('scheduled_at', [$dates['start'], $dates['end']]);
                
            $performanceData[$period] = [
                'total_bookings' => $bookings->count(),
                'completed_bookings' => $bookings->where('status', 'completed')->count(),
                'total_revenue' => $bookings->where('status', 'completed')->sum('price'),
                'avg_booking_value' => $bookings->where('status', 'completed')->avg('price') ?? 0,
                'completion_rate' => $bookings->count() > 0 
                    ? round(($bookings->where('status', 'completed')->count() / $bookings->count()) * 100, 2)
                    : 0
            ];
        }

        // Service breakdown
        $serviceBreakdown = Booking::join('services', 'bookings.service_id', '=', 'services.id')
            ->where('bookings.staff_id', $staff->id)
            ->where('bookings.status', 'completed')
            ->select('services.name', 
                DB::raw('COUNT(*) as bookings_count'),
                DB::raw('SUM(bookings.price) as total_revenue')
            )
            ->groupBy('services.id', 'services.name')
            ->orderBy('bookings_count', 'desc')
            ->get();

        return view('staff.performance', compact('performanceData', 'serviceBreakdown'));
    }
}